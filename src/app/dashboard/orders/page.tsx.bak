'use client'

import React, { useEffect, useState } from 'react'
import {
  BsCheck2Circle,
  BsClockHistory,
  BsSearch,
  BsXCircle,
} from 'react-icons/bs'
import { CiCircleMore } from 'react-icons/ci'
import { useOrder } from '@/hooks/useOrder'
import { format, formatDistanceToNow } from 'date-fns'

// Status colors for different order statuses
const statusColors: Record<string, string> = {
  pending: 'bg-yellow-100 text-yellow-700 border-yellow-300',
  preparing: 'bg-yellow-100 text-yellow-700 border-yellow-300',
  ready: 'bg-green-100 text-green-700 border-green-300',
  completed: 'bg-primary/20 text-primary border-primary/40',
  cancelled: 'bg-red-100 text-red-700 border-red-300',
}

export default function OrdersPage() {
  const { orders, isLoading, error, fetchOrders, updateOrderStatus } = useOrder()
  const [filter, setFilter] = useState<string>('all')
  const [searchQuery, setSearchQuery] = useState<string>('')

  // Fetch orders on component mount
  useEffect(() => {
    fetchOrders()
  }, [fetchOrders])

  // Function to handle status update
  const handleStatusChange = async (orderId: string, newStatus: 'pending' | 'preparing' | 'ready' | 'completed' | 'cancelled') => {
    await updateOrderStatus({
      id: orderId,
      status: newStatus,
    })
  }

  // Function to get formatted time (relative or absolute)
  const getFormattedTime = (dateString: string) => {
    const date = new Date(dateString)
    // Show relative time if less than 1 day old
    if (Date.now() - date.getTime() < 24 * 60 * 60 * 1000) {
      return formatDistanceToNow(date, { addSuffix: true })
    }
    // Otherwise show absolute date
    return format(date, 'MMM dd, h:mm a')
  }

  // Filter orders based on status and search query
  const filteredOrders = orders?.filter(order => {
    // Filter by status
    if (filter !== 'all' && order.status !== filter) {
      return false
    }
    
    // Filter by search query
    if (searchQuery) {
      const query = searchQuery.toLowerCase()
      return (
        order.customerName.toLowerCase().includes(query) ||
        order.id.toLowerCase().includes(query) ||
        (order.tableNumber && order.tableNumber.toLowerCase().includes(query))
      )
    }
    
    return true
  })

  return (
    <div className="w-full min-h-[85vh] flex flex-col gap-6 px-2 sm:px-4 md:px-8 py-4 md:py-8 bg-[#f7f7f7] rounded-2xl shadow-inner custom-scrollbar">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <h1 className="text-2xl md:text-3xl font-inter-semibold text-black">
            Orders
          </h1>
          <p className="text-gray-600 text-xs md:text-sm mt-1">
            Track, manage, and update all cafe orders in real time.
          </p>
        </div>
        <div className="flex items-center gap-2 w-full md:w-auto">
          <div className="relative w-full md:w-64">
            <input
              type="text"
              placeholder="Search orders..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 pr-4 py-2 w-full rounded-xl border border-gray-300 focus:ring-primary focus:border-primary text-sm"
            />
            <BsSearch className="absolute left-3 top-2.5 text-gray-500" />
          </div>

          <select
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            className="px-3 py-2 rounded-xl border border-gray-300 focus:ring-primary focus:border-primary text-sm"
          >
            <option value="all">All Statuses</option>
            <option value="pending">Pending</option>
            <option value="preparing">Preparing</option>
            <option value="ready">Ready</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>
      </div>

      {isLoading && (
        <div className="flex justify-center items-center my-8">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary"></div>
        </div>
      )}

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative my-4">
          <span className="block sm:inline">{error}</span>
        </div>
      )}

      {!isLoading && !error && (
        <div className="bg-white rounded-2xl border border-gray-200 shadow-sm overflow-hidden">
          <div className="flex justify-between items-center p-4 border-b">
            <h2 className="text-lg font-inter-semibold text-gray-900">
              All Orders
            </h2>
            <button className="flex items-center gap-2 px-4 py-2 rounded-xl bg-gradient-to-tr from-secondary to-primary text-white font-medium shadow-inner border border-primary/20 text-sm">
              <CiCircleMore className="text-xl" /> More
            </button>
          </div>
          <div className="overflow-x-auto custom-scrollbar">
            <table className="min-w-full text-sm text-gray-700">
              <thead>
                <tr className="bg-[#f7f7f7] text-gray-700">
                  <th className="px-4 py-2 text-left rounded-tl-2xl">Order ID</th>
                  <th className="px-4 py-2 text-left">Table</th>
                  <th className="px-4 py-2 text-left">Customer</th>
                  <th className="px-4 py-2 text-left">Items</th>
                  <th className="px-4 py-2 text-left">Time</th>
                  <th className="px-4 py-2 text-left">Status</th>
                  <th className="px-4 py-2 text-left">Total</th>
                  <th className="px-4 py-2 text-left rounded-tr-2xl">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredOrders?.length === 0 ? (
                  <tr>
                    <td colSpan={8} className="px-4 py-8 text-center text-gray-500">
                      No orders found
                    </td>
                  </tr>
                ) : (
                  filteredOrders?.map((order) => (
                    <tr
                      key={order.id}
                      className="border-b last:border-b-0 hover:bg-[#fffde7] transition"
                    >
                      <td className="px-4 py-3 font-semibold text-secondary">
                        {order.id.substring(0, 8)}...
                      </td>
                      <td className="px-4 py-3">{order.tableNumber || 'Takeaway'}</td>
                      <td className="px-4 py-3">{order.customerName}</td>
                      <td className="px-4 py-3">
                        <ul className="space-y-1">
                          {order.items.map((item, i) => (
                            <li key={i} className="flex items-center gap-1">
                              <span className="text-gray-800">
                                {item.quantity}x {item.name}
                              </span>
                            </li>
                          ))}
                        </ul>
                      </td>
                      <td className="px-4 py-3 text-gray-600">
                        {getFormattedTime(order.createdAt)}
                      </td>
                      <td className="px-4 py-3">
                        <span
                          className={`inline-flex items-center gap-1 px-3 py-1 rounded-full border text-xs font-semibold ${statusColors[order.status]}`}
                        >
                          {(order.status === 'pending' || order.status === 'preparing') && (
                            <BsClockHistory className="text-yellow-500" />
                          )}
                          {order.status === 'ready' && (
                            <BsCheck2Circle className="text-green-500" />
                          )}
                          {order.status === 'completed' && (
                            <BsCheck2Circle className="text-primary" />
                          )}
                          {order.status === 'cancelled' && (
                            <BsXCircle className="text-red-500" />
                          )}
                          {order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                        </span>
                      </td>
                      <td className="px-4 py-3 font-bold text-gray-900">
                        â‚¹{order.totalAmount.toFixed(2)}
                      </td>
                      <td className="px-4 py-3">
                        <div className="flex gap-2">
                          <select
                            className="px-2 py-1 rounded-lg border border-primary/30 text-primary text-xs font-semibold"
                            value={order.status}
                            onChange={(e) => handleStatusChange(order.id, e.target.value as any)}
                          >
                            <option value="pending">Pending</option>
                            <option value="preparing">Preparing</option>
                            <option value="ready">Ready</option>
                            <option value="completed">Completed</option>
                            <option value="cancelled">Cancelled</option>
                          </select>
                        </div>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  )
}
